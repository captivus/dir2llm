#!/usr/bin/env bash

# dir2llm - Convert directory contents to LLM context
# Combines directory structure and file contents into a single text file

set -euo pipefail  # Exit on error, undefined vars, pipe failures

# ============================================================================
# Configuration
# ============================================================================
MAX_FILE_SIZE="${MAX_FILE_SIZE:-1024k}"  # 1MB in kilobytes for portability
EXCLUDE_DIRS="${EXCLUDE_DIRS:-.git,node_modules,__pycache__}"
OUTPUT_FILE="$(basename "$PWD")_contents.txt"

# ============================================================================
# Helper Functions
# ============================================================================

# Build find exclusion pattern from comma-separated list
build_exclude_pattern() {
    local dirs="$1"
    local pattern=""

    IFS=',' read -ra dir_array <<< "$dirs"
    for dir in "${dir_array[@]}"; do
        [[ -n "$pattern" ]] && pattern="$pattern -o "
        pattern="${pattern}-name $dir"
    done

    echo "$pattern"
}

# Check if file is text (not binary)
is_text_file() {
    grep -qI . "$1" 2>/dev/null
}

# Print directory structure
print_directory_tree() {
    echo "===== DIRECTORY STRUCTURE ====="

    # Use tree if available, otherwise fallback to find
    if command -v tree >/dev/null 2>&1; then
        local tree_ignore=$(echo "$EXCLUDE_DIRS" | tr ',' '|')
        tree -a -I "$tree_ignore" .
    else
        find . -type d | grep -v -E "$(echo "$EXCLUDE_DIRS" | tr ',' '|')" | sort
    fi

    echo ""
}

# Print file contents section
print_file_contents() {
    echo "===== FILE CONTENTS ====="

    local exclude_pattern=$(build_exclude_pattern "$EXCLUDE_DIRS")

    # Find and process each file
    find . \
        \( $exclude_pattern \) -type d -prune \
        -o -type f \
        ! -name "$OUTPUT_FILE" \
        -size -"$MAX_FILE_SIZE" \
        -print0 | \
    sort -z | \
    while IFS= read -r -d '' file; do
        if is_text_file "$file"; then
            printf '\n===== %s =====\n' "$file"
            cat "$file"
        else
            printf '\n===== %s ===== [SKIPPED: Binary file]\n' "$file"
        fi
    done
}

# ============================================================================
# Main Script
# ============================================================================

main() {
    echo "Creating $OUTPUT_FILE..."

    {
        # Header
        echo "===== Directory: $PWD ====="
        echo "===== Generated: $(date) ====="
        echo ""

        # Directory structure
        print_directory_tree

        # File contents
        print_file_contents

    } > "$OUTPUT_FILE"

    # Report success
    echo "âœ“ Created $OUTPUT_FILE ($(du -h "$OUTPUT_FILE" | cut -f1))"
}

# Run main function
main "$@"